package test;

import java.io.InputStream;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import com.ibm.integration.test.v1.NodeSpy;
import com.ibm.integration.test.v1.SpyObjectReference;
import com.ibm.integration.test.v1.TestMessageAssembly;
import com.ibm.integration.test.v1.TestSetup;
import com.ibm.integration.test.v1.exception.TestException;

import static com.ibm.integration.test.v1.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class DatabaseReader_HTTPFlow_CountRows_0001_Test {

	/*
	 * DatabaseReader_HTTPFlow_CountRows_0001_Test
	 * Test generated by IBM App Connect Enterprise Toolkit 13.0.2.0 on Feb 21, 2025, 8:16:56 PM
	 */

	@AfterEach
	public void cleanupTest() throws TestException {
		// Ensure any mocks created by a test are cleared after the test runs 
		TestSetup.restoreAllMocks();
	}

	@BeforeAll
	public static void databaseSetup() throws Exception 
	{
		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("TestDatabaseSetup")
				.messageFlow("ODBCSetupFlow").node("SetupDatabase");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

		// Declare a new TestMessageAssembly object for the message being sent into the node
		TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();
		
		// Set up data for use by the test itself
		inputMessageAssembly.localEnvironmentPath("TestDatabaseSetup.Inserts.one")
	     .setValue("INSERT INTO TEST_Tea(id, name) VALUES(1, 'Darjeeling')");
		inputMessageAssembly.localEnvironmentPath("TestDatabaseSetup.Inserts.two")
	     .setValue("INSERT INTO TEST_Tea(id, name) VALUES(2, 'Assam')");
		inputMessageAssembly.localEnvironmentPath("TestDatabaseSetup.Inserts.three")
	     .setValue("INSERT INTO TEST_Tea(id, name) VALUES(3, 'Kenya')");
		inputMessageAssembly.localEnvironmentPath("TestDatabaseSetup.Inserts.four")
	     .setValue("INSERT INTO TEST_Tea(id, name) VALUES(4, 'Oolong')");
		
		// Call the message flow node with the Message Assembly
		nodeSpy.evaluate(inputMessageAssembly, true, "in");
	}

	@Test
	public void DatabaseReader_HTTPFlow_CountRows_TestCase_001() throws TestException {

		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("DatabaseReader")
				.messageFlow("HTTPFlow").node("CountRows");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

		// Declare a new TestMessageAssembly object for the message being sent into the node
		TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();
		// Call the message flow node with the Message Assembly
		nodeSpy.evaluate(inputMessageAssembly, true, "in");

		// Assert the number of times that the node is called
		assertThat(nodeSpy, nodeCallCountIs(1));

		// Assert the terminal propagate count for the message
		assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

		// Compare Output Message 1 at output terminal out
		TestMessageAssembly actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);
        assertEquals(4, actualMessageAssembly.messagePath("JSON.Data.rowCount").getLongValue());

	}

}
